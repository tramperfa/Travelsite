type Story {
  _id: ID!
  draft: ID
  title: String!
  snapshotContent: String
  content: JSON
  #poi: POI
  headlineImage: Image
  coverImage: Image
  author: PublicUser
  images: [Image]
  lastUpdate: String
  viewCount: Int
  likeStoryCount: Int
  archiveStoryCount: Int
  commentCount: Int
  commentReply: [Comment]
}


type Comment {
  _id: ID
  isReply: Boolean
  storyID: ID
  author: ID
  content: JSON
  quoteImage: ID
  publishTime: String
  replyTo: replyToComment
}

type replyToComment {
  authorName: String
  publishTime: String
  content: JSON
}

### TODO  ###
# author: PublicUser
# quoteImage: Image

type Query {
  story(_id: ID!): Story
  stories: [Story]
  userStories(userID: ID!): [Story]
  DeletedStories: [Story] @auth(role: "USER")
  #storyList(type: $type, offset: $offset, limit: Int = 10) [Story]
}



type Mutation {
  likeStory(storyID: ID!): Story @auth(role: "USER")
  archiveStory(storyID: ID!): Story @auth(role: "USER")
  deleteStory(storyID: ID!): Story @auth(role: "OWNER")
  recoverStory(storyID: ID!): Story @auth(role: "OWNER")
  commentStory(input: commentStoryInput!): Comment @auth(role: "USER")
  replyStory(input: replyStoryInput!): Comment @auth(role: "OWNER")
  removeCommentReply(input: removeCommentReplyInput!): removeCommentReplyPayload  @auth(role: "USER")
}


input commentStoryInput {
  content: JSON!
  storyID: ID!
  quoteImage: Boolean
  imageID: ID
}

input replyStoryInput {
  content: JSON!
  storyID: ID!
  replytoID: String
}

input removeCommentReplyInput{
  storyID: ID!
  deleteID: String
}

type removeCommentReplyPayload {
    commentReply: [Comment]
}
