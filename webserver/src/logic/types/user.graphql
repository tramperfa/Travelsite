
type User {
  _id: ID!
  fullName: String
  publicProfile: JSON
  avatar: Image
  role: String
  following: [ID]
  follower: [ID]
  email: String
  provider: String
  facebook: String
  google: String
  likeStory: [ID]
  archiveStory: [ID]
  archiveImage: [ID]
  facebook: String
  google: String
  verifyToken: String
  status: Int
}


type Query {
  # No Auth Requried for userSelf Query as long as request userID matches session userID
  userSelf(userID: ID!): User
  userByID(userID: ID!): User @auth(role: "ADMIN")
}

type Mutation {
  registerUser(input: registerUserInput!): User
  localLogin(input: localLoginInput!): LocalLoginPayload
  logout(fullName: String): LogoutPayload
  #updateAvatar
  #googleLogin(input: googleLoginInput!): User
}

type LogoutPayload{
  success: Boolean
}

input registerUserInput {
  fullName: String
  email: String
  password: String
}

input localLoginInput {
  email: String
  password: String
}

type LocalLoginPayload {
  user: User
}
